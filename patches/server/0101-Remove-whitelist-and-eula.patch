From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kirill <iyaargg@gmail.com>
Date: Mon, 1 Jul 2024 15:28:19 +0500
Subject: [PATCH] Remove whitelist and eula


diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index fc522873afec453c34a308c4459cac4cdf8e2715..5b66183b480e04361ca9e4e68336cad5019d6fd8 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -62,7 +62,6 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             this.a((ICommand) (new CommandPardon()));
             this.a((ICommand) (new CommandKick()));
             this.a((ICommand) (new CommandList()));
-            this.a((ICommand) (new CommandWhitelist()));
             this.a((ICommand) (new CommandIdleTimeout()));
         } else {
             this.a((ICommand) (new CommandPublish()));
diff --git a/src/main/java/net/minecraft/server/CommandWhitelist.java b/src/main/java/net/minecraft/server/CommandWhitelist.java
deleted file mode 100644
index 7c29357bdeda142148a709b9e031ba7f77865ba2..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/CommandWhitelist.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package net.minecraft.server;
-
-import com.mojang.authlib.GameProfile;
-import java.util.List;
-
-public class CommandWhitelist extends CommandAbstract {
-
-    public CommandWhitelist() {}
-
-    public String getCommand() {
-        return "whitelist";
-    }
-
-    public int a() {
-        return 3;
-    }
-
-    public String getUsage(ICommandListener icommandlistener) {
-        return "commands.whitelist.usage";
-    }
-
-    public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
-        if (astring.length < 1) {
-            throw new ExceptionUsage("commands.whitelist.usage", new Object[0]);
-        } else {
-            MinecraftServer minecraftserver = MinecraftServer.getServer();
-
-            if (astring[0].equals("on")) {
-                minecraftserver.getPlayerList().setHasWhitelist(true);
-                a(icommandlistener, this, "commands.whitelist.enabled", new Object[0]);
-            } else if (astring[0].equals("off")) {
-                minecraftserver.getPlayerList().setHasWhitelist(false);
-                a(icommandlistener, this, "commands.whitelist.disabled", new Object[0]);
-            } else if (astring[0].equals("list")) {
-                icommandlistener.sendMessage(new ChatMessage("commands.whitelist.list", new Object[] { Integer.valueOf(minecraftserver.getPlayerList().getWhitelisted().length), Integer.valueOf(minecraftserver.getPlayerList().getSeenPlayers().length)}));
-                String[] astring1 = minecraftserver.getPlayerList().getWhitelisted();
-
-                icommandlistener.sendMessage(new ChatComponentText(a((Object[]) astring1)));
-            } else {
-                GameProfile gameprofile;
-
-                if (astring[0].equals("add")) {
-                    if (astring.length < 2) {
-                        throw new ExceptionUsage("commands.whitelist.add.usage", new Object[0]);
-                    }
-
-                    gameprofile = minecraftserver.getUserCache().getProfile(astring[1]);
-                    if (gameprofile == null) {
-                        throw new CommandException("commands.whitelist.add.failed", new Object[] { astring[1]});
-                    }
-
-                    minecraftserver.getPlayerList().addWhitelist(gameprofile);
-                    a(icommandlistener, this, "commands.whitelist.add.success", new Object[] { astring[1]});
-                } else if (astring[0].equals("remove")) {
-                    if (astring.length < 2) {
-                        throw new ExceptionUsage("commands.whitelist.remove.usage", new Object[0]);
-                    }
-
-                    gameprofile = minecraftserver.getPlayerList().getWhitelist().a(astring[1]);
-                    if (gameprofile == null) {
-                        throw new CommandException("commands.whitelist.remove.failed", new Object[] { astring[1]});
-                    }
-
-                    minecraftserver.getPlayerList().removeWhitelist(gameprofile);
-                    a(icommandlistener, this, "commands.whitelist.remove.success", new Object[] { astring[1]});
-                } else if (astring[0].equals("reload")) {
-                    minecraftserver.getPlayerList().reloadWhitelist();
-                    a(icommandlistener, this, "commands.whitelist.reloaded", new Object[0]);
-                }
-            }
-
-        }
-    }
-
-    public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
-        if (astring.length == 1) {
-            return a(astring, new String[] { "on", "off", "list", "add", "remove", "reload"});
-        } else {
-            if (astring.length == 2) {
-                if (astring[0].equals("remove")) {
-                    return a(astring, MinecraftServer.getServer().getPlayerList().getWhitelisted());
-                }
-
-                if (astring[0].equals("add")) {
-                    return a(astring, MinecraftServer.getServer().getUserCache().a());
-                }
-            }
-
-            return null;
-        }
-    }
-}
diff --git a/src/main/java/net/minecraft/server/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
index 75dc45f2e5fe59333b0e11d50209b1d1cb4ce947..6de4f488ac4f7bf83832da4619628e862bc1a9ec 100644
--- a/src/main/java/net/minecraft/server/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
@@ -13,7 +13,6 @@ public class DedicatedPlayerList extends PlayerList {
         super(dedicatedserver);
         this.a(dedicatedserver.a("view-distance", 10));
         this.maxPlayers = dedicatedserver.a("max-players", 20);
-        this.setHasWhitelist(dedicatedserver.a("white-list", false));
         if (!dedicatedserver.T()) {
             this.getProfileBans().a(true);
             this.getIPBans().a(true);
@@ -24,18 +23,8 @@ public class DedicatedPlayerList extends PlayerList {
         this.y();
         this.w();
         this.A();
-        this.C();
         this.B();
-        if (!this.getWhitelist().c().exists()) {
-            this.D();
-        }
-
-    }
 
-    public void setHasWhitelist(boolean flag) {
-        super.setHasWhitelist(flag);
-        this.getServer().a("white-list", (Object) Boolean.valueOf(flag));
-        this.getServer().a();
     }
 
     public void addOp(GameProfile gameprofile) {
@@ -48,20 +37,6 @@ public class DedicatedPlayerList extends PlayerList {
         this.B();
     }
 
-    public void removeWhitelist(GameProfile gameprofile) {
-        super.removeWhitelist(gameprofile);
-        this.D();
-    }
-
-    public void addWhitelist(GameProfile gameprofile) {
-        super.addWhitelist(gameprofile);
-        this.D();
-    }
-
-    public void reloadWhitelist() {
-        this.C();
-    }
-
     private void w() {
         try {
             this.getIPBans().save();
@@ -116,28 +91,6 @@ public class DedicatedPlayerList extends PlayerList {
 
     }
 
-    private void C() {
-        try {
-            this.getWhitelist().load();
-        } catch (Exception exception) {
-            DedicatedPlayerList.f.warn("Failed to load white-list: ", exception);
-        }
-
-    }
-
-    private void D() {
-        try {
-            this.getWhitelist().save();
-        } catch (Exception exception) {
-            DedicatedPlayerList.f.warn("Failed to save white-list: ", exception);
-        }
-
-    }
-
-    public boolean isWhitelisted(GameProfile gameprofile) {
-        return !this.getHasWhitelist() || this.isOp(gameprofile) || this.getWhitelist().isWhitelisted(gameprofile);
-    }
-
     public DedicatedServer getServer() {
         return (DedicatedServer) super.getServer();
     }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8371b5dcc6b1088543a3baffa6e72a885405edff..9d34ce55b2d168f59504ffd17e045de255780659 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
@@ -12,11 +13,13 @@ import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
 import java.io.PrintStream;
+
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
@@ -33,7 +36,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     private RemoteStatusListener m;
     private RemoteControlListener n;
     public PropertyManager propertyManager;
-    private EULA p;
     private boolean generateStructures;
     private WorldSettings.EnumGamemode r;
     private boolean s;
@@ -42,7 +44,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     // PandaSpigot start - Modern tick loop
     public DedicatedServer(joptsimple.OptionSet options, Thread serverThread) {
         super(options, Proxy.NO_PROXY, DedicatedServer.a, serverThread);
-    // PandaSpigot end
+        // PandaSpigot end
         // CraftBukkit end
         Thread thread = new Thread("Server Infinisleeper") {
             {
@@ -135,69 +137,55 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         DedicatedServer.LOGGER.info("Loading properties");
         this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
-        this.p = new EULA(new File("eula.txt"));
         // Spigot Start
-        boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
-        if ( eulaAgreed )
-        {
-            System.err.println( "You have used the Spigot command line EULA agreement flag." );
-            System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
-            System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
-        }
-        // Spigot End
-        if (!this.p.a() && !eulaAgreed) { // Spigot
-            DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            this.p.b();
-            return false;
+        if (this.T()) {
+            this.c("127.0.0.1");
         } else {
-            if (this.T()) {
-                this.c("127.0.0.1");
-            } else {
-                this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
-                this.c(this.propertyManager.getString("server-ip", ""));
-            }
-
-            this.setSpawnAnimals(this.propertyManager.getBoolean("spawn-animals", true));
-            this.setSpawnNPCs(this.propertyManager.getBoolean("spawn-npcs", true));
-            this.setPVP(this.propertyManager.getBoolean("pvp", true));
-            this.setAllowFlight(this.propertyManager.getBoolean("allow-flight", false));
-            this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.propertyManager.getString("resource-pack-hash", ""));
-            this.setMotd(this.propertyManager.getString("motd", "A Minecraft Server"));
-            this.setForceGamemode(this.propertyManager.getBoolean("force-gamemode", false));
-            this.setIdleTimeout(this.propertyManager.getInt("player-idle-timeout", 0));
-            if (this.propertyManager.getInt("difficulty", 1) < 0) {
-                this.propertyManager.setProperty("difficulty", Integer.valueOf(0));
-            } else if (this.propertyManager.getInt("difficulty", 1) > 3) {
-                this.propertyManager.setProperty("difficulty", Integer.valueOf(3));
-            }
+            this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
+            this.c(this.propertyManager.getString("server-ip", ""));
+        }
 
-            this.generateStructures = this.propertyManager.getBoolean("generate-structures", true);
-            int i = this.propertyManager.getInt("gamemode", WorldSettings.EnumGamemode.SURVIVAL.getId());
+        this.setSpawnAnimals(this.propertyManager.getBoolean("spawn-animals", true));
+        this.setSpawnNPCs(this.propertyManager.getBoolean("spawn-npcs", true));
+        this.setPVP(this.propertyManager.getBoolean("pvp", true));
+        this.setAllowFlight(this.propertyManager.getBoolean("allow-flight", false));
+        this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.propertyManager.getString("resource-pack-hash", ""));
+        this.setMotd(this.propertyManager.getString("motd", "A Minecraft Server"));
+        this.setForceGamemode(this.propertyManager.getBoolean("force-gamemode", false));
+        this.setIdleTimeout(this.propertyManager.getInt("player-idle-timeout", 0));
+        if (this.propertyManager.getInt("difficulty", 1) < 0) {
+            this.propertyManager.setProperty("difficulty", Integer.valueOf(0));
+        } else if (this.propertyManager.getInt("difficulty", 1) > 3) {
+            this.propertyManager.setProperty("difficulty", Integer.valueOf(3));
+        }
 
-            this.r = WorldSettings.a(i);
-            DedicatedServer.LOGGER.info("Default game type: " + this.r);
-            
-            // PandaSpigot start - Unix domain socket support
-            // PandaSpigot - Move SpigotConfig to load earlier, so that we can check IP forwarding status here.
-            // Spigot start
-            this.a((PlayerList) (new DedicatedPlayerList(this)));
-            org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
-            org.spigotmc.SpigotConfig.registerCommands();
-            new com.hpfxd.pandaspigot.Metrics(); // PandaSpigot
-            // Spigot end
-            java.net.SocketAddress bindAddress;
-            if (this.getServerIp().startsWith("unix:")) {
-                if (!io.netty.channel.epoll.Epoll.isAvailable()) {
-                    DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
-                    DedicatedServer.LOGGER.fatal("You are trying to use a Unix domain socket but you're not on a supported OS.");
-                    return false;
-                } else if (!org.spigotmc.SpigotConfig.bungee) {
-                    DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
-                    DedicatedServer.LOGGER.fatal("Unix domain sockets require IPs to be forwarded from a proxy.");
-                    return false;
-                }
-                bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getServerIp().substring("unix:".length()));
-            } else {
+        this.generateStructures = this.propertyManager.getBoolean("generate-structures", true);
+        int i = this.propertyManager.getInt("gamemode", WorldSettings.EnumGamemode.SURVIVAL.getId());
+
+        this.r = WorldSettings.a(i);
+        DedicatedServer.LOGGER.info("Default game type: " + this.r);
+
+        // PandaSpigot start - Unix domain socket support
+        // PandaSpigot - Move SpigotConfig to load earlier, so that we can check IP forwarding status here.
+        // Spigot start
+        this.a((PlayerList) (new DedicatedPlayerList(this)));
+        org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        new com.hpfxd.pandaspigot.Metrics(); // PandaSpigot
+        // Spigot end
+        java.net.SocketAddress bindAddress;
+        if (this.getServerIp().startsWith("unix:")) {
+            if (!io.netty.channel.epoll.Epoll.isAvailable()) {
+                DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                DedicatedServer.LOGGER.fatal("You are trying to use a Unix domain socket but you're not on a supported OS.");
+                return false;
+            } else if (!org.spigotmc.SpigotConfig.bungee) {
+                DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                DedicatedServer.LOGGER.fatal("Unix domain sockets require IPs to be forwarded from a proxy.");
+                return false;
+            }
+            bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getServerIp().substring("unix:".length()));
+        } else {
             // PandaSpigot end
             InetAddress inetaddress = null;
 
@@ -209,145 +197,144 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.setPort(this.propertyManager.getInt("server-port", 25565));
             }
             bindAddress = new java.net.InetSocketAddress(inetaddress, this.R());
-            }
-            com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) options.valueOf("pandaspigot-settings"));
-            // PandaSpigot end
-            // PaperSpigot start
-            org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
-            org.github.paperspigot.PaperSpigotConfig.registerCommands();
-            // PaperSpigot end
+        }
+        com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) options.valueOf("pandaspigot-settings"));
+        // PandaSpigot end
+        // PaperSpigot start
+        org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
+        org.github.paperspigot.PaperSpigotConfig.registerCommands();
+        // PaperSpigot end
 
-            DedicatedServer.LOGGER.info("Generating keypair");
-            this.a(MinecraftEncryption.b());
-            DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
+        DedicatedServer.LOGGER.info("Generating keypair");
+        this.a(MinecraftEncryption.b());
+        DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
         if (!org.spigotmc.SpigotConfig.lateBind) {
             try {
                 this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
+                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[]{ioexception.toString()});
                 DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
                 return false;
             }
         }
 
-            // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
-            // this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
-            server.loadPlugins();
-            server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
-            // Spigot End
-
-            if (!this.getOnlineMode()) {
-                DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-                DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-                // Spigot start
-                if (org.spigotmc.SpigotConfig.bungee) {
-                    DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
-                    DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
-                } else {
-                    DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-                }
-                // Spigot end
-                DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
-            }
-
-            if (this.aR()) {
-                this.getUserCache().c();
-            }
+        // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
+        // this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
+        server.loadPlugins();
+        server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        // Spigot End
 
-            if (!NameReferencingFileConverter.a(this.propertyManager)) {
-                return false;
+        if (!this.getOnlineMode()) {
+            DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
+            DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
+            // Spigot start
+            if (org.spigotmc.SpigotConfig.bungee) {
+                DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
             } else {
-                this.convertable = new WorldLoaderServer(server.getWorldContainer()); // CraftBukkit - moved from MinecraftServer constructor
-                long j = System.nanoTime();
+                DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Spigot end
+            DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
+        }
 
-                if (this.U() == null) {
-                    this.setWorld(this.propertyManager.getString("level-name", "world"));
-                }
+        if (this.aR()) {
+            this.getUserCache().c();
+        }
 
-                String s = this.propertyManager.getString("level-seed", "");
-                String s1 = this.propertyManager.getString("level-type", "DEFAULT");
-                String s2 = this.propertyManager.getString("generator-settings", "");
-                long k = (new Random()).nextLong();
+        if (!NameReferencingFileConverter.a(this.propertyManager)) {
+            return false;
+        } else {
+            this.convertable = new WorldLoaderServer(server.getWorldContainer()); // CraftBukkit - moved from MinecraftServer constructor
+            long j = System.nanoTime();
 
-                if (s.length() > 0) {
-                    try {
-                        long l = Long.parseLong(s);
+            if (this.U() == null) {
+                this.setWorld(this.propertyManager.getString("level-name", "world"));
+            }
 
-                        if (l != 0L) {
-                            k = l;
-                        }
-                    } catch (NumberFormatException numberformatexception) {
-                        k = (long) s.hashCode();
-                    }
-                }
+            String s = this.propertyManager.getString("level-seed", "");
+            String s1 = this.propertyManager.getString("level-type", "DEFAULT");
+            String s2 = this.propertyManager.getString("generator-settings", "");
+            long k = (new Random()).nextLong();
 
-                WorldType worldtype = WorldType.getType(s1);
+            if (s.length() > 0) {
+                try {
+                    long l = Long.parseLong(s);
 
-                if (worldtype == null) {
-                    worldtype = WorldType.NORMAL;
+                    if (l != 0L) {
+                        k = l;
+                    }
+                } catch (NumberFormatException numberformatexception) {
+                    k = (long) s.hashCode();
                 }
+            }
 
-                this.aB();
-                this.getEnableCommandBlock();
-                this.p();
-                this.getSnooperEnabled();
-                this.aK();
-                this.c(this.propertyManager.getInt("max-build-height", 256));
-                this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
-                this.c(MathHelper.clamp(this.getMaxBuildHeight(), 64, 256));
-                this.propertyManager.setProperty("max-build-height", Integer.valueOf(this.getMaxBuildHeight()));
-                DedicatedServer.LOGGER.info("Preparing level \"" + this.U() + "\"");
-                this.a(this.U(), this.U(), k, worldtype, s2);
-                long i1 = System.nanoTime() - j;
-                String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
-
-                DedicatedServer.LOGGER.info("Done (" + s3 + ")! For help, type \"help\" or \"?\"");
-                if (this.propertyManager.getBoolean("enable-query", false)) {
-                    DedicatedServer.LOGGER.info("Starting GS4 status listener");
-                    this.m = new RemoteStatusListener(this);
-                    this.m.a();
-                }
+            WorldType worldtype = WorldType.getType(s1);
 
-                if (this.propertyManager.getBoolean("enable-rcon", false)) {
-                    DedicatedServer.LOGGER.info("Starting remote control listener");
-                    this.n = new RemoteControlListener(this);
-                    this.n.a();
-                    this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(); // CraftBukkit
-                }
+            if (worldtype == null) {
+                worldtype = WorldType.NORMAL;
+            }
 
-                // CraftBukkit start
-                if (this.server.getBukkitSpawnRadius() > -1) {
-                    DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
-                    this.propertyManager.properties.remove("spawn-protection");
-                    this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
-                    this.server.removeBukkitSpawnRadius();
-                    this.propertyManager.savePropertiesFile();
-                }
-                // CraftBukkit end
+            this.aB();
+            this.getEnableCommandBlock();
+            this.p();
+            this.getSnooperEnabled();
+            this.aK();
+            this.c(this.propertyManager.getInt("max-build-height", 256));
+            this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
+            this.c(MathHelper.clamp(this.getMaxBuildHeight(), 64, 256));
+            this.propertyManager.setProperty("max-build-height", Integer.valueOf(this.getMaxBuildHeight()));
+            DedicatedServer.LOGGER.info("Preparing level \"" + this.U() + "\"");
+            this.a(this.U(), this.U(), k, worldtype, s2);
+            long i1 = System.nanoTime() - j;
+            String s3 = String.format("%.3fs", new Object[]{Double.valueOf((double) i1 / 1.0E9D)});
+
+            DedicatedServer.LOGGER.info("Done (" + s3 + ")! For help, type \"help\" or \"?\"");
+            if (this.propertyManager.getBoolean("enable-query", false)) {
+                DedicatedServer.LOGGER.info("Starting GS4 status listener");
+                this.m = new RemoteStatusListener(this);
+                this.m.a();
+            }
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
-            try {
-                this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
-            } catch (IOException ioexception) {
-                DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
-                DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
+            if (this.propertyManager.getBoolean("enable-rcon", false)) {
+                DedicatedServer.LOGGER.info("Starting remote control listener");
+                this.n = new RemoteControlListener(this);
+                this.n.a();
+                this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(); // CraftBukkit
             }
-        }
 
-                if (false && this.aS() > 0L) {  // Spigot - disable
-                    Thread thread1 = new Thread(new ThreadWatchdog(this));
+            // CraftBukkit start
+            if (this.server.getBukkitSpawnRadius() > -1) {
+                DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                this.propertyManager.properties.remove("spawn-protection");
+                this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
+                this.server.removeBukkitSpawnRadius();
+                this.propertyManager.savePropertiesFile();
+            }
+            // CraftBukkit end
 
-                    thread1.setName("Server Watchdog");
-                    thread1.setDaemon(true);
-                    thread1.start();
+            if (org.spigotmc.SpigotConfig.lateBind) {
+                try {
+                    this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
+                } catch (IOException ioexception) {
+                    DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                    DedicatedServer.LOGGER.warn("The exception was: {}", new Object[]{ioexception.toString()});
+                    DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+                    return false;
                 }
+            }
 
-                return true;
+            if (false && this.aS() > 0L) {  // Spigot - disable
+                Thread thread1 = new Thread(new ThreadWatchdog(this));
+
+                thread1.setName("Server Watchdog");
+                thread1.setDaemon(true);
+                thread1.start();
             }
+
+            return true;
         }
     }
 
@@ -378,7 +365,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.propertyManager.getBoolean("hardcore", false);
     }
 
-    protected void a(CrashReport crashreport) {}
+    protected void a(CrashReport crashreport) {
+    }
 
     public CrashReport b(CrashReport crashreport) {
         crashreport = super.b(crashreport);
@@ -422,12 +410,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.propertyManager.getBoolean("spawn-monsters", true);
     }
 
-    public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aP().getHasWhitelist()));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aP().getWhitelisted().length));
-        super.a(mojangstatisticsgenerator);
-    }
-
     public boolean getSnooperEnabled() {
         return this.propertyManager.getBoolean("snooper-enabled", true);
     }
@@ -572,7 +554,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     protected boolean aR() {
-        server.getLogger().info( "**** Beginning UUID conversion, this may take A LONG time ****"); // Spigot, let the user know whats up!
+        server.getLogger().info("**** Beginning UUID conversion, this may take A LONG time ****"); // Spigot, let the user know whats up!
         boolean flag = false;
 
         int i;
@@ -608,17 +590,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
         }
 
-        boolean flag3 = false;
-
-        for (i = 0; !flag3 && i <= 2; ++i) {
-            if (i > 0) {
-                DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.aU();
-            }
-
-            flag3 = NameReferencingFileConverter.d((MinecraftServer) this);
-        }
-
         boolean flag4 = false;
 
         for (i = 0; !flag4 && i <= 2; ++i) {
@@ -630,7 +601,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             flag4 = NameReferencingFileConverter.a(this, this.propertyManager);
         }
 
-        return flag || flag1 || flag2 || flag3 || flag4;
+        return flag || flag1 || flag2 || flag4;
     }
 
     private void aU() {
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
deleted file mode 100644
index c872029df78fec74eaadd478ef543c450c42755c..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/EULA.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package net.minecraft.server;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.util.Properties;
-import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public class EULA {
-
-    private static final Logger a = LogManager.getLogger();
-    private final File b;
-    private final boolean c;
-
-    public EULA(File file) {
-        this.b = file;
-        this.c = this.a(file);
-    }
-
-    private boolean a(File file) {
-        FileInputStream fileinputstream = null;
-        boolean flag = false;
-
-        try {
-            Properties properties = new Properties();
-
-            fileinputstream = new FileInputStream(file);
-            properties.load(fileinputstream);
-            flag = Boolean.parseBoolean(properties.getProperty("eula", "false"));
-        } catch (Exception exception) {
-            EULA.a.warn("Failed to load " + file);
-            this.b();
-        } finally {
-            IOUtils.closeQuietly(fileinputstream);
-        }
-
-        return flag;
-    }
-
-    public boolean a() {
-        return this.c;
-    }
-
-    public void b() {
-        FileOutputStream fileoutputstream = null;
-
-        try {
-            Properties properties = new Properties();
-
-            fileoutputstream = new FileOutputStream(this.b);
-            properties.setProperty("eula", "false");
-            properties.store(fileoutputstream, "By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).");
-        } catch (Exception exception) {
-            EULA.a.warn("Failed to save " + this.b, exception);
-        } finally {
-            IOUtils.closeQuietly(fileoutputstream);
-        }
-
-    }
-}
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 1f368aa9343b03610d8b2a9996743f779f0281ff..2f42aab370a333d58dab545475b2fe16d48887a2 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -229,51 +229,6 @@ public class NameReferencingFileConverter {
         }
     }
 
-    public static boolean d(final MinecraftServer minecraftserver) {
-        final WhiteList whitelist = new WhiteList(PlayerList.d);
-
-        if (NameReferencingFileConverter.d.exists() && NameReferencingFileConverter.d.isFile()) {
-            if (whitelist.c().exists()) {
-                try {
-                    whitelist.load();
-                // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
-                } catch (IOException filenotfoundexception) {
-                    NameReferencingFileConverter.e.warn("Could not load existing file " + whitelist.c().getName());
-                }
-            }
-
-            try {
-                List list = Files.readLines(NameReferencingFileConverter.d, Charsets.UTF_8);
-                ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
-                    public void onProfileLookupSucceeded(GameProfile gameprofile) {
-                        minecraftserver.getUserCache().a(gameprofile);
-                        whitelist.add(new WhiteListEntry(gameprofile));
-                    }
-
-                    public void onProfileLookupFailed(GameProfile gameprofile, Exception exception) {
-                        NameReferencingFileConverter.e.warn("Could not lookup user whitelist entry for " + gameprofile.getName(), exception);
-                        if (!(exception instanceof ProfileNotFoundException)) {
-                            throw new NameReferencingFileConverter.FileConversionException("Could not request user " + gameprofile.getName() + " from backend systems", exception, null);
-                        }
-                    }
-                };
-
-                a(minecraftserver, list, profilelookupcallback);
-                whitelist.save();
-                c(NameReferencingFileConverter.d);
-                return true;
-            } catch (IOException ioexception) {
-                NameReferencingFileConverter.e.warn("Could not read old whitelist to convert it!", ioexception);
-                return false;
-            } catch (NameReferencingFileConverter.FileConversionException namereferencingfileconverter_fileconversionexception) {
-                NameReferencingFileConverter.e.error("Conversion failed, please try again later", namereferencingfileconverter_fileconversionexception);
-                return false;
-            }
-        } else {
-            return true;
-        }
-    }
-
     public static String a(String s) {
         if (!UtilColor.b(s) && s.length() <= 16) {
             final MinecraftServer minecraftserver = MinecraftServer.getServer();
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index ada9cf25b091c2df24301bb5e82d1f76fbd929e5..5f8df6b46ecbec5f46b2585673161c768cd416f7 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -44,7 +44,6 @@ public abstract class PlayerList {
     public static final File a = new File("banned-players.json");
     public static final File b = new File("banned-ips.json");
     public static final File c = new File("ops.json");
-    public static final File d = new File("whitelist.json");
     private static final Logger f = LogManager.getLogger();
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
@@ -53,10 +52,8 @@ public abstract class PlayerList {
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
-    private final WhiteList whitelist;
     private final Map<UUID, ServerStatisticManager> o;
     public IPlayerFileData playerFileData;
-    private boolean hasWhitelist;
     protected int maxPlayers;
     private int r;
     private WorldSettings.EnumGamemode s;
@@ -75,7 +72,6 @@ public abstract class PlayerList {
         this.k = new GameProfileBanList(PlayerList.a);
         this.l = new IpBanList(PlayerList.b);
         this.operators = new OpList(PlayerList.c);
-        this.whitelist = new WhiteList(PlayerList.d);
         this.o = Maps.newHashMap();
         this.server = minecraftserver;
         this.k.a(false);
@@ -454,9 +450,6 @@ public abstract class PlayerList {
 
             // return s;
             if (!gameprofilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s); // Spigot
-        } else if (!this.isWhitelisted(gameprofile)) {
-            // return "You are not white-listed on this server!";
-            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
         } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
             IpBanEntry ipbanentry = this.l.get(socketaddress);
 
@@ -1040,10 +1033,6 @@ public abstract class PlayerList {
         // CraftBukkit end
     }
 
-    public boolean isWhitelisted(GameProfile gameprofile) {
-        return !this.hasWhitelist || this.operators.d(gameprofile) || this.whitelist.d(gameprofile);
-    }
-
     public boolean isOp(GameProfile gameprofile) {
         return this.operators.d(gameprofile) || this.server.T() && this.server.worlds.get(0).getWorldData().v() && this.server.S().equalsIgnoreCase(gameprofile.getName()) || this.t; // CraftBukkit
     }
@@ -1086,22 +1075,6 @@ public abstract class PlayerList {
 
     }
 
-    public void addWhitelist(GameProfile gameprofile) {
-        this.whitelist.add(new WhiteListEntry(gameprofile));
-    }
-
-    public void removeWhitelist(GameProfile gameprofile) {
-        this.whitelist.remove(gameprofile);
-    }
-
-    public WhiteList getWhitelist() {
-        return this.whitelist;
-    }
-
-    public String[] getWhitelisted() {
-        return this.whitelist.getEntries();
-    }
-
     public OpList getOPs() {
         return this.operators;
     }
@@ -1110,8 +1083,6 @@ public abstract class PlayerList {
         return this.operators.getEntries();
     }
 
-    public void reloadWhitelist() {}
-
     public void b(EntityPlayer entityplayer, WorldServer worldserver) {
         WorldBorder worldborder = entityplayer.world.getWorldBorder(); // CraftBukkit
 
@@ -1148,14 +1119,6 @@ public abstract class PlayerList {
         return this.server.worlds.get(0).getDataManager().getPlayerFileData().getSeenPlayers(); // CraftBukkit
     }
 
-    public boolean getHasWhitelist() {
-        return this.hasWhitelist;
-    }
-
-    public void setHasWhitelist(boolean flag) {
-        this.hasWhitelist = flag;
-    }
-
     public List<EntityPlayer> b(String s) {
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.players.iterator();
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
deleted file mode 100644
index b25a0f60215281861b43ae5c765d669c43da3fe8..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/WhiteList.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package net.minecraft.server;
-
-import com.google.gson.JsonObject;
-import com.mojang.authlib.GameProfile;
-import java.io.File;
-import java.util.Iterator;
-
-public class WhiteList extends JsonList<GameProfile, WhiteListEntry> {
-
-    public WhiteList(File file) {
-        super(file);
-    }
-
-    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
-        return new WhiteListEntry(jsonobject);
-    }
-
-    public boolean isWhitelisted(GameProfile gameprofile) {
-        return this.d(gameprofile);
-    }
-
-    public String[] getEntries() {
-        String[] astring = new String[this.e().size()];
-        int i = 0;
-
-        WhiteListEntry whitelistentry;
-
-        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) whitelistentry.getKey()).getName()) {
-            whitelistentry = (WhiteListEntry) iterator.next();
-        }
-
-        return astring;
-    }
-
-    protected String b(GameProfile gameprofile) {
-        return gameprofile.getId().toString();
-    }
-
-    public GameProfile a(String s) {
-        Iterator iterator = this.e().values().iterator();
-
-        WhiteListEntry whitelistentry;
-
-        do {
-            if (!iterator.hasNext()) {
-                return null;
-            }
-
-            whitelistentry = (WhiteListEntry) iterator.next();
-        } while (!s.equalsIgnoreCase(((GameProfile) whitelistentry.getKey()).getName()));
-
-        return (GameProfile) whitelistentry.getKey();
-    }
-
-    protected String a(GameProfile object) {
-        return this.b(object);
-    }
-}
diff --git a/src/main/java/net/minecraft/server/WhiteListEntry.java b/src/main/java/net/minecraft/server/WhiteListEntry.java
deleted file mode 100644
index 06d29a4d0987b0bb77ed53d27d7d97f3dc2782ad..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/WhiteListEntry.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package net.minecraft.server;
-
-import com.google.gson.JsonObject;
-import com.mojang.authlib.GameProfile;
-import java.util.UUID;
-
-public class WhiteListEntry extends JsonListEntry<GameProfile> {
-
-    public WhiteListEntry(GameProfile gameprofile) {
-        super(gameprofile);
-    }
-
-    public WhiteListEntry(JsonObject jsonobject) {
-        super(b(jsonobject), jsonobject);
-    }
-
-    protected void a(JsonObject jsonobject) {
-        if (this.getKey() != null) {
-            jsonobject.addProperty("uuid", ((GameProfile) this.getKey()).getId() == null ? "" : ((GameProfile) this.getKey()).getId().toString());
-            jsonobject.addProperty("name", ((GameProfile) this.getKey()).getName());
-            super.a(jsonobject);
-        }
-    }
-
-    private static GameProfile b(JsonObject jsonobject) {
-        if (jsonobject.has("uuid") && jsonobject.has("name")) {
-            String s = jsonobject.get("uuid").getAsString();
-
-            UUID uuid;
-
-            try {
-                uuid = UUID.fromString(s);
-            } catch (Throwable throwable) {
-                return null;
-            }
-
-            return new GameProfile(uuid, jsonobject.get("name").getAsString());
-        } else {
-            return null;
-        }
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 45217866bba8f7b8e065da7eca78776f1441dba9..083cbcd30c94cdb1cb2aededd868446d8c4438e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -7,7 +7,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
-import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.WorldNBTStorage;
 
@@ -109,18 +108,6 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
-    public boolean isWhitelisted() {
-        return server.getHandle().getWhitelist().isWhitelisted(profile);
-    }
-
-    public void setWhitelisted(boolean value) {
-        if (value) {
-            server.getHandle().addWhitelist(profile);
-        } else {
-            server.getHandle().removeWhitelist(profile);
-        }
-    }
-
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3b9325010cd1bfce07cefe0b8514d33d39fd9136..a1044fa605952d23b7d51add8f3bea10ca995b3c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -12,7 +12,6 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -573,11 +572,6 @@ public final class CraftServer implements Server {
         return this.configuration.getBoolean("settings.query-plugins");
     }
 
-    @Override
-    public boolean hasWhitelist() {
-        return this.getConfigBoolean("white-list", false);
-    }
-
     // NOTE: Temporary calls through to server.properies until its replaced
     private String getConfigString(String variable, String defaultValue) {
         return this.console.getPropertyManager().getString(variable, defaultValue);
@@ -1463,23 +1457,6 @@ public final class CraftServer implements Server {
         }
     }
 
-    @Override
-    public void setWhitelist(boolean value) {
-        playerList.setHasWhitelist(value);
-        console.getPropertyManager().setProperty("white-list", value);
-    }
-
-    @Override
-    public Set<OfflinePlayer> getWhitelistedPlayers() {
-        Set<OfflinePlayer> result = new LinkedHashSet<OfflinePlayer>();
-
-        for (JsonListEntry entry : playerList.getWhitelist().getValues()) {
-            result.add(getOfflinePlayer((GameProfile) entry.getKey()));
-        }
-
-        return result;
-    }
-
     @Override
     public Set<OfflinePlayer> getOperators() {
         Set<OfflinePlayer> result = new HashSet<OfflinePlayer>();
@@ -1491,11 +1468,6 @@ public final class CraftServer implements Server {
         return result;
     }
 
-    @Override
-    public void reloadWhitelist() {
-        playerList.reloadWhitelist();
-    }
-
     @Override
     public GameMode getDefaultGameMode() {
         return GameMode.getByValue(console.worlds.get(0).getWorldData().getGameType().getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 5dfacdde9d5702ed17c25980329803e57f1fb65a..2c61fac8ca5408ce3e732f9772ca4af6961dc215 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -823,20 +823,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    @Override
-    public boolean isWhitelisted() {
-        return server.getHandle().getWhitelist().isWhitelisted(getProfile());
-    }
-
-    @Override
-    public void setWhitelisted(boolean value) {
-        if (value) {
-            server.getHandle().addWhitelist(getProfile());
-        } else {
-            server.getHandle().removeWhitelist(getProfile());
-        }
-    }
-
     @Override
     public void setGameMode(GameMode mode) {
         if (getHandle().playerConnection == null) return;
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index dfd1de256e15c800658e1ce8c76a587eeb310e9c..0b2c26f10ecaae52e2c205ceb57549e1fb596b42 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -190,7 +190,6 @@ public class SpigotConfig
         tabComplete = getInt( "commands.tab-complete", 0 );
     }
 
-    public static String whitelistMessage;
     public static String unknownCommandMessage;
     public static String serverFullMessage;
     public static String outdatedClientMessage = "Outdated client! Please use {0}";
@@ -207,7 +206,6 @@ public class SpigotConfig
             set( "messages.outdated-server", outdatedServerMessage );
         }
 
-        whitelistMessage = transform( getString( "messages.whitelist", "You are not whitelisted on this server!" ) );
         unknownCommandMessage = transform( getString( "messages.unknown-command", "Unknown command. Type \"/help\" for help." ) );
         serverFullMessage = transform( getString( "messages.server-full", "The server is full!" ) );
         outdatedClientMessage = transform( getString( "messages.outdated-client", outdatedClientMessage ) );
