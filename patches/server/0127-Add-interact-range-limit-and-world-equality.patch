From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Rejomy <iyaargg@gmail.com>
Date: Fri, 10 Jan 2025 13:25:35 +0500
Subject: [PATCH] Add interact range limit and world equality.


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 2b99dc2a3153c6ac5628b0fed9f59afb44c71552..40dc1eb6a86dede8377775ad2776fd9193d24cbc 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -70,10 +70,10 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private static final Logger c = LogManager.getLogger();
     // PandaSpigot start - Smooth teleportation
     private static final Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> TELEPORT_NO_ROT =
-            com.google.common.collect.Sets.immutableEnumSet(
-                    PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT,
-                    PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT
-            );
+        com.google.common.collect.Sets.immutableEnumSet(
+            PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT,
+            PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT
+        );
     // PandaSpigot end
     public final NetworkManager networkManager;
     private final MinecraftServer minecraftServer;
@@ -192,8 +192,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         this.networkManager.k();
         // CraftBukkit - Don't wait
         this.minecraftServer.postToMainThread(new Runnable() {
-             public void run() {
-                 PlayerConnection.this.networkManager.l();
+            public void run() {
+                PlayerConnection.this.networkManager.l();
             }
         });
     }
@@ -282,8 +282,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             if (this.player.world.pandaSpigotConfig.smoothTeleportation) {
                                 this.player.playerConnection.sendPacket(new PacketPlayOutPosition(from.getX(), from.getY(), from.getZ(), 0, 0, TELEPORT_NO_ROT));
                             } else {
-                            // PandaSpigot end
-                            this.player.playerConnection.sendPacket(new PacketPlayOutPosition(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet()));
+                                // PandaSpigot end
+                                this.player.playerConnection.sendPacket(new PacketPlayOutPosition(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet()));
                             } // PandaSpigot - closing bracket
                             return;
                         }
@@ -556,83 +556,83 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         this.player.resetIdleTimer();
         // CraftBukkit start
         switch (PlayerConnection.SyntheticClass_1.a[packetplayinblockdig.c().ordinal()]) {
-        case 1: // DROP_ITEM
-            if (!this.player.isSpectator()) {
-                // limit how quickly items can be dropped
-                // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
-                if (this.lastDropTick != MinecraftServer.currentTick) {
-                    this.dropCount = 0;
-                    this.lastDropTick = MinecraftServer.currentTick;
-                } else {
-                    // Else we increment the drop count and check the amount.
-                    this.dropCount++;
-                    if (this.dropCount >= 20) {
-                        this.c.warn(this.player.getName() + " dropped their items too quickly!");
-                        this.disconnect("You dropped your items too quickly (Hacking?)");
-                        return;
+            case 1: // DROP_ITEM
+                if (!this.player.isSpectator()) {
+                    // limit how quickly items can be dropped
+                    // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                    if (this.lastDropTick != MinecraftServer.currentTick) {
+                        this.dropCount = 0;
+                        this.lastDropTick = MinecraftServer.currentTick;
+                    } else {
+                        // Else we increment the drop count and check the amount.
+                        this.dropCount++;
+                        if (this.dropCount >= 20) {
+                            this.c.warn(this.player.getName() + " dropped their items too quickly!");
+                            this.disconnect("You dropped your items too quickly (Hacking?)");
+                            return;
+                        }
                     }
+                    // CraftBukkit end
+                    this.player.a(false);
                 }
-                // CraftBukkit end
-                this.player.a(false);
-            }
 
-            return;
+                return;
 
-        case 2: // DROP_ALL_ITEMS
-            if (!this.player.isSpectator()) {
-                this.player.a(true);
-            }
+            case 2: // DROP_ALL_ITEMS
+                if (!this.player.isSpectator()) {
+                    this.player.a(true);
+                }
 
-            return;
+                return;
 
-        case 3: // RELEASE_USE_ITEM
-            this.player.bU();
-            return;
+            case 3: // RELEASE_USE_ITEM
+                this.player.bU();
+                return;
 
-        case 4: // START_DESTROY_BLOCK
-        case 5: // ABORT_DESTROY_BLOCK
-        case 6: // STOP_DESTROY_BLOCK
-            double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
-            double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
-            double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
-            double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+            case 4: // START_DESTROY_BLOCK
+            case 5: // ABORT_DESTROY_BLOCK
+            case 6: // STOP_DESTROY_BLOCK
+                double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
+                double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
+                double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
+                double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-            if (d3 > 36.0D) {
-                return;
-            } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight()) {
-                return;
-            } else {
-                if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
-                    if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-                        this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
+                if (d3 > 36.0D) {
+                    return;
+                } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight()) {
+                    return;
+                } else {
+                    if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
+                        if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
+                            this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
+                        } else {
+                            // CraftBukkit start - fire PlayerInteractEvent
+                            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand());
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                            // Update any tile entity data for this block
+                            TileEntity tileentity = worldserver.getTileEntity(blockposition);
+                            if (tileentity != null) {
+                                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                            }
+                            // CraftBukkit end
+                        }
                     } else {
-                        // CraftBukkit start - fire PlayerInteractEvent
-                        CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand());
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-                        // Update any tile entity data for this block
-                        TileEntity tileentity = worldserver.getTileEntity(blockposition);
-                        if (tileentity != null) {
-                            this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                        if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.a(blockposition);
+                        } else if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.e();
                         }
-                        // CraftBukkit end
-                    }
-                } else {
-                    if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
-                        this.player.playerInteractManager.a(blockposition);
-                    } else if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
-                        this.player.playerInteractManager.e();
-                    }
 
-                    if (worldserver.getType(blockposition).getBlock().getMaterial() != Material.AIR) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        if (worldserver.getType(blockposition).getBlock().getMaterial() != Material.AIR) {
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        }
                     }
-                }
 
-                return;
-            }
+                    return;
+                }
 
-        default:
-            throw new IllegalArgumentException("Invalid player action");
+            default:
+                throw new IllegalArgumentException("Invalid player action");
         }
         // CraftBukkit end
     }
@@ -653,7 +653,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             lastPlace = packetplayinblockplace.timestamp;
             packets = 0;
         }
-    // Spigot end
+        // Spigot end
 
         // CraftBukkit start
         if (this.player.dead) return;
@@ -678,42 +678,42 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             // CraftBukkit start
             int itemstackAmount = itemstack.count;
             // Spigot start - skip the event if throttled
-            if (!throttled) {            
-            // Raytrace to look for 'rogue armswings'
-            float f1 = this.player.pitch;
-            float f2 = this.player.yaw;
-            double d0 = this.player.locX;
-            double d1 = this.player.locY + (double) this.player.getHeadHeight();
-            double d2 = this.player.locZ;
-            Vec3D vec3d = new Vec3D(d0, d1, d2);
-
-            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
-            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
-            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
-            float f6 = MathHelper.sin(-f1 * 0.017453292F);
-            float f7 = f4 * f5;
-            float f8 = f3 * f5;
-            double d3 = player.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.CREATIVE ? 5.0D : 4.5D;
-            Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
-
-            boolean cancelled = false;
-            if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
-                cancelled = event.useItemInHand() == Event.Result.DENY;
-            } else {
-                if (player.playerInteractManager.firedInteract) {
-                    player.playerInteractManager.firedInteract = false;
-                    cancelled = player.playerInteractManager.interactResult;
-                } else {
-                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true);
+            if (!throttled) {
+                // Raytrace to look for 'rogue armswings'
+                float f1 = this.player.pitch;
+                float f2 = this.player.yaw;
+                double d0 = this.player.locX;
+                double d1 = this.player.locY + (double) this.player.getHeadHeight();
+                double d2 = this.player.locZ;
+                Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+                float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+                float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+                float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+                float f6 = MathHelper.sin(-f1 * 0.017453292F);
+                float f7 = f4 * f5;
+                float f8 = f3 * f5;
+                double d3 = player.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+                Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+                MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
+
+                boolean cancelled = false;
+                if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
                     cancelled = event.useItemInHand() == Event.Result.DENY;
+                } else {
+                    if (player.playerInteractManager.firedInteract) {
+                        player.playerInteractManager.firedInteract = false;
+                        cancelled = player.playerInteractManager.interactResult;
+                    } else {
+                        org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true);
+                        cancelled = event.useItemInHand() == Event.Result.DENY;
+                    }
                 }
-            }
 
-            if (!cancelled) {
-                this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
-            }
+                if (!cancelled) {
+                    this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
+                }
             }
             // Spigot end
 
@@ -1150,11 +1150,11 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     }
     // CraftBukkit end
 
-   private void handleCommand(String s) {
+    private void handleCommand(String s) {
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
-       // CraftBukkit start - whole method
+        // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.c.info(this.player.getName() + " issued server command: " + s);
+            this.c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
@@ -1244,41 +1244,41 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         // CraftBukkit end
         this.player.resetIdleTimer();
         switch (PlayerConnection.SyntheticClass_1.b[packetplayinentityaction.b().ordinal()]) {
-        case 1:
-            this.player.setSneaking(true);
-            break;
-
-        case 2:
-            this.player.setSneaking(false);
-            break;
-
-        case 3:
-            this.player.setSprinting(true);
-            break;
-
-        case 4:
-            this.player.setSprinting(false);
-            break;
-
-        case 5:
-            this.player.a(false, true, true);
-            // this.checkMovement = false; // CraftBukkit - this is handled in teleport
-            break;
-
-        case 6:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).v(packetplayinentityaction.c());
-            }
-            break;
+            case 1:
+                this.player.setSneaking(true);
+                break;
 
-        case 7:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).g((EntityHuman) this.player);
-            }
-            break;
+            case 2:
+                this.player.setSneaking(false);
+                break;
 
-        default:
-            throw new IllegalArgumentException("Invalid client command!");
+            case 3:
+                this.player.setSprinting(true);
+                break;
+
+            case 4:
+                this.player.setSprinting(false);
+                break;
+
+            case 5:
+                this.player.a(false, true, true);
+                // this.checkMovement = false; // CraftBukkit - this is handled in teleport
+                break;
+
+            case 6:
+                if (this.player.vehicle instanceof EntityHorse) {
+                    ((EntityHorse) this.player.vehicle).v(packetplayinentityaction.c());
+                }
+                break;
+
+            case 7:
+                if (this.player.vehicle instanceof EntityHorse) {
+                    ((EntityHorse) this.player.vehicle).g((EntityHuman) this.player);
+                }
+                break;
+
+            default:
+                throw new IllegalArgumentException("Invalid client command!");
         }
 
     }
@@ -1308,71 +1308,74 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             if (this.player.h(entity) < d0) {*/
 
-            ItemStack itemInHand = this.player.inventory.getItemInHand(); // CraftBukkit
+            // if player try to interact with entity farther than 20 blocks in server distance, prevent it.
+            // It cause issue when some player teleport but if player use backtrack, he still can punch the entity.
+            if (entity.world == player.world && this.player.h(entity) < 400) {
 
-            if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
-                || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-                // CraftBukkit start
-                boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
-                Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
-                PlayerInteractEntityEvent event;
-                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                    event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity());
-                } else {
-                    Vec3D target = packetplayinuseentity.b();
-                    event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.a, target.b, target.c));
-                }
-                this.server.getPluginManager().callEvent(event);
+                ItemStack itemInHand = this.player.inventory.getItemInHand(); // CraftBukkit
 
-                if (triggerLeashUpdate && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != Items.LEAD)) {
-                    // Refresh the current leash state
-                    this.sendPacket(new PacketPlayOutAttachEntity(1, entity, ((EntityInsentient) entity).getLeashHolder()));
-                }
+                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
+                    || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                    // CraftBukkit start
+                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
+                    Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
+                    PlayerInteractEntityEvent event;
+                    if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity());
+                    } else {
+                        Vec3D target = packetplayinuseentity.b();
+                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.a, target.b, target.c));
+                    }
+                    this.server.getPluginManager().callEvent(event);
 
-                if (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem) {
-                    // Refresh the current entity metadata
-                    this.sendPacket(new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher, true));
-                }
+                    if (triggerLeashUpdate && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != Items.LEAD)) {
+                        // Refresh the current leash state
+                        this.sendPacket(new PacketPlayOutAttachEntity(1, entity, ((EntityInsentient) entity).getLeashHolder()));
+                    }
 
-                if (event.isCancelled()) {
-                    return;
-                }
-                // CraftBukkit end
-            }
-            if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                this.player.u(entity);
+                    if (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem) {
+                        // Refresh the current entity metadata
+                        this.sendPacket(new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher, true));
+                    }
 
-                // CraftBukkit start
-                if (itemInHand != null && itemInHand.count <= -1) {
-                    this.player.updateInventory(this.player.activeContainer);
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                 }
-                // CraftBukkit end
-            } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-                entity.a((EntityHuman) this.player, packetplayinuseentity.b());
+                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                    this.player.u(entity);
 
-                // CraftBukkit start
-                if (itemInHand != null && itemInHand.count <= -1) {
-                    this.player.updateInventory(this.player.activeContainer);
-                }
-                // CraftBukkit end
-            } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
-                if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
-                    this.disconnect("Attempting to attack an invalid entity");
-                    this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
-                    return;
-                }
+                    // CraftBukkit start
+                    if (itemInHand != null && itemInHand.count <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
+                } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                    entity.a((EntityHuman) this.player, packetplayinuseentity.b());
 
-                this.player.attack(entity);
+                    // CraftBukkit start
+                    if (itemInHand != null && itemInHand.count <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
+                } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
+                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
+                        this.disconnect("Attempting to attack an invalid entity");
+                        this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
+                        return;
+                    }
+
+                    this.player.attack(entity);
 
-                // CraftBukkit start
-                if (itemInHand != null && itemInHand.count <= -1) {
-                    this.player.updateInventory(this.player.activeContainer);
+                    // CraftBukkit start
+                    if (itemInHand != null && itemInHand.count <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
                 }
-                // CraftBukkit end
             }
         }
-        //}
-        // Rejomy patch start
 
     }
 
@@ -1382,35 +1385,35 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         PacketPlayInClientCommand.EnumClientCommand packetplayinclientcommand_enumclientcommand = packetplayinclientcommand.a();
 
         switch (PlayerConnection.SyntheticClass_1.c[packetplayinclientcommand_enumclientcommand.ordinal()]) {
-        case 1:
-            if (this.player.viewingCredits) {
-                // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-                this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
-            } else if (this.player.u().getWorldData().isHardcore()) {
-                if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
-                    this.minecraftServer.aa();
+            case 1:
+                if (this.player.viewingCredits) {
+                    // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
+                    this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
+                } else if (this.player.u().getWorldData().isHardcore()) {
+                    if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
+                        this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                        this.minecraftServer.aa();
+                    } else {
+                        GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), (Date) null, "(You just lost the game)", (Date) null, "Death in Hardcore");
+
+                        this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
+                        this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    }
                 } else {
-                    GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), (Date) null, "(You just lost the game)", (Date) null, "Death in Hardcore");
+                    if (this.player.getHealth() > 0.0F) {
+                        return;
+                    }
 
-                    this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
                 }
-            } else {
-                if (this.player.getHealth() > 0.0F) {
-                    return;
-                }
-
-                this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
-            }
-            break;
+                break;
 
-        case 2:
-            this.player.getStatisticManager().a(this.player);
-            break;
+            case 2:
+                this.player.getStatisticManager().a(this.player);
+                break;
 
-        case 3:
-            this.player.b((Statistic) AchievementList.f);
+            case 3:
+                this.player.b((Statistic) AchievementList.f);
         }
 
     }
@@ -1646,9 +1649,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
                             // PaperSpigot start - Stackable Buckets
                             if (itemstack != null &&
-                                    ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                            (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) ||
-                                            (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
+                                ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
+                                    (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) ||
+                                    (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
                                 if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                                     this.player.updateInventory(this.player.activeContainer);
                                 } else {
@@ -1802,19 +1805,19 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 itemstack = CraftItemStack.asNMSCopy(event.getCursor());
 
                 switch (event.getResult()) {
-                case ALLOW:
-                    // Plugin cleared the id / stacksize checks
-                    flag2 = flag3 = true;
-                    break;
-                case DEFAULT:
-                    break;
-                case DENY:
-                    // Reset the slot
-                    if (packetplayinsetcreativeslot.a() >= 0) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, null));
-                    }
-                    return;
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = flag3 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (packetplayinsetcreativeslot.a() >= 0) {
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, null));
+                        }
+                        return;
                 }
             }
             // CraftBukkit end
@@ -1899,7 +1902,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             if (!event.isCancelled()) {
                 System.arraycopy(org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.lines, 0, 4);
                 tileentitysign.isEditable = false;
-             }
+            }
             // CraftBukkit end
 
             tileentitysign.update();
@@ -2027,219 +2030,219 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         ItemStack itemstack1;
 
         try { // CraftBukkit
-        if ("MC|BEdit".equals(packetplayincustompayload.a())) {
-            // PandaSpigot start - Cooldown on book edit
-            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-                this.disconnect("Book edited too quickly!");
-                return;
-            }
-            this.lastBookTick = MinecraftServer.currentTick;
-            // PandaSpigot end
-            packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
-
-            try {
-                itemstack = packetdataserializer.i();
-                if (itemstack == null) {
+            if ("MC|BEdit".equals(packetplayincustompayload.a())) {
+                // PandaSpigot start - Cooldown on book edit
+                if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                    this.disconnect("Book edited too quickly!");
                     return;
                 }
+                this.lastBookTick = MinecraftServer.currentTick;
+                // PandaSpigot end
+                packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
-                if (!ItemBookAndQuill.b(itemstack.getTag())) {
-                    throw new IOException("Invalid book tag!");
-                }
+                try {
+                    itemstack = packetdataserializer.i();
+                    if (itemstack == null) {
+                        return;
+                    }
 
-                itemstack1 = this.player.inventory.getItemInHand();
-                if (itemstack1 != null) {
-                    if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
-                        if (!validateBook(itemstack)) return; // PandaSpigot
-                        itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
-                        itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
-                        CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
+                    if (!ItemBookAndQuill.b(itemstack.getTag())) {
+                        throw new IOException("Invalid book tag!");
                     }
 
+                    itemstack1 = this.player.inventory.getItemInHand();
+                    if (itemstack1 != null) {
+                        if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
+                            if (!validateBook(itemstack)) return; // PandaSpigot
+                            itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
+                            itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                            CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
+                        }
+
+                        return;
+                    }
+                } catch (Exception exception) {
+                    PlayerConnection.c.error("Couldn\'t handle book info", exception);
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                     return;
+                } finally {
+                    packetdataserializer.release();
                 }
-            } catch (Exception exception) {
-                PlayerConnection.c.error("Couldn\'t handle book info", exception);
-                this.disconnect("Invalid book data!"); // CraftBukkit
-                return;
-            } finally {
-                packetdataserializer.release();
-            }
 
-            return;
-        } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
-            // PandaSpigot start - Cooldown on book sign
-            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-                this.disconnect("Book edited too quickly!");
                 return;
-            }
-            this.lastBookTick = MinecraftServer.currentTick;
-            // PandaSpigot end
-            packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
-
-            try {
-                itemstack = packetdataserializer.i();
-                if (itemstack == null) {
+            } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
+                // PandaSpigot start - Cooldown on book sign
+                if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                    this.disconnect("Book edited too quickly!");
                     return;
                 }
+                this.lastBookTick = MinecraftServer.currentTick;
+                // PandaSpigot end
+                packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
-                if (!ItemWrittenBook.b(itemstack.getTag())) {
-                    throw new IOException("Invalid book tag!");
-                }
+                try {
+                    itemstack = packetdataserializer.i();
+                    if (itemstack == null) {
+                        return;
+                    }
 
-                itemstack1 = this.player.inventory.getItemInHand();
-                if (itemstack1 != null) {
-                    if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
-                        if (!validateBook(itemstack)) return; // PandaSpigot
-                        // CraftBukkit start
-                        itemstack1 = new ItemStack(Items.WRITTEN_BOOK);
-                        itemstack1.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
-                        itemstack1.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
-                        itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
-                        itemstack1.setItem(Items.WRITTEN_BOOK);
-                        CraftEventFactory.handleEditBookEvent(player, itemstack1);
-                        // CraftBukkit end
+                    if (!ItemWrittenBook.b(itemstack.getTag())) {
+                        throw new IOException("Invalid book tag!");
                     }
 
+                    itemstack1 = this.player.inventory.getItemInHand();
+                    if (itemstack1 != null) {
+                        if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
+                            if (!validateBook(itemstack)) return; // PandaSpigot
+                            // CraftBukkit start
+                            itemstack1 = new ItemStack(Items.WRITTEN_BOOK);
+                            itemstack1.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
+                            itemstack1.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
+                            itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                            itemstack1.setItem(Items.WRITTEN_BOOK);
+                            CraftEventFactory.handleEditBookEvent(player, itemstack1);
+                            // CraftBukkit end
+                        }
+
+                        return;
+                    }
+                } catch (Exception exception1) {
+                    // FlamePaper - Supress Invalid Book Exceptions
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                     return;
+                } finally {
+                    packetdataserializer.release();
                 }
-            } catch (Exception exception1) {
-                // FlamePaper - Supress Invalid Book Exceptions
-                this.disconnect("Invalid book data!"); // CraftBukkit
-                return;
-            } finally {
-                packetdataserializer.release();
-            }
 
-            return;
-        } else if ("MC|TrSel".equals(packetplayincustompayload.a())) {
-            try {
-                int i = packetplayincustompayload.b().readInt();
-                Container container = this.player.activeContainer;
+                return;
+            } else if ("MC|TrSel".equals(packetplayincustompayload.a())) {
+                try {
+                    int i = packetplayincustompayload.b().readInt();
+                    Container container = this.player.activeContainer;
 
-                if (container instanceof ContainerMerchant) {
-                    ((ContainerMerchant) container).d(i);
+                    if (container instanceof ContainerMerchant) {
+                        ((ContainerMerchant) container).d(i);
+                    }
+                } catch (Exception exception2) {
+                    PlayerConnection.c.error("Couldn\'t select trade", exception2);
+                    this.disconnect("Invalid trade data!"); // CraftBukkit
                 }
-            } catch (Exception exception2) {
-                PlayerConnection.c.error("Couldn\'t select trade", exception2);
-                this.disconnect("Invalid trade data!"); // CraftBukkit
-            }
-        } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
-            if (!this.minecraftServer.getEnableCommandBlock()) {
-                this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
-            } else if (this.player.getBukkitEntity().isOp() && this.player.abilities.canInstantlyBuild) { // CraftBukkit - Change to Bukkit OP versus Vanilla OP
-                packetdataserializer = packetplayincustompayload.b();
+            } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
+                if (!this.minecraftServer.getEnableCommandBlock()) {
+                    this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                } else if (this.player.getBukkitEntity().isOp() && this.player.abilities.canInstantlyBuild) { // CraftBukkit - Change to Bukkit OP versus Vanilla OP
+                    packetdataserializer = packetplayincustompayload.b();
 
-                try {
-                    byte b0 = packetdataserializer.readByte();
-                    CommandBlockListenerAbstract commandblocklistenerabstract = null;
+                    try {
+                        byte b0 = packetdataserializer.readByte();
+                        CommandBlockListenerAbstract commandblocklistenerabstract = null;
 
-                    if (b0 == 0) {
-                        TileEntity tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                        if (b0 == 0) {
+                            TileEntity tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
 
-                        if (tileentity instanceof TileEntityCommand) {
-                            commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
-                        }
-                    } else if (b0 == 1) {
-                        Entity entity = this.player.world.a(packetdataserializer.readInt());
+                            if (tileentity instanceof TileEntityCommand) {
+                                commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
+                            }
+                        } else if (b0 == 1) {
+                            Entity entity = this.player.world.a(packetdataserializer.readInt());
 
-                        if (entity instanceof EntityMinecartCommandBlock) {
-                            commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            if (entity instanceof EntityMinecartCommandBlock) {
+                                commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            }
                         }
-                    }
 
-                    String s = packetdataserializer.c(packetdataserializer.readableBytes());
-                    boolean flag = packetdataserializer.readBoolean();
+                        String s = packetdataserializer.c(packetdataserializer.readableBytes());
+                        boolean flag = packetdataserializer.readBoolean();
 
-                    if (commandblocklistenerabstract != null) {
-                        commandblocklistenerabstract.setCommand(s);
-                        commandblocklistenerabstract.a(flag);
-                        if (!flag) {
-                            commandblocklistenerabstract.b((IChatBaseComponent) null);
-                        }
+                        if (commandblocklistenerabstract != null) {
+                            commandblocklistenerabstract.setCommand(s);
+                            commandblocklistenerabstract.a(flag);
+                            if (!flag) {
+                                commandblocklistenerabstract.b((IChatBaseComponent) null);
+                            }
 
-                        commandblocklistenerabstract.h();
-                        this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s}));
+                            commandblocklistenerabstract.h();
+                            this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s}));
+                        }
+                    } catch (Exception exception3) {
+                        PlayerConnection.c.error("Couldn\'t set command block", exception3);
+                        this.disconnect("Invalid CommandBlock data!"); // CraftBukkit
+                    } finally {
+                        packetdataserializer.release();
                     }
-                } catch (Exception exception3) {
-                    PlayerConnection.c.error("Couldn\'t set command block", exception3);
-                    this.disconnect("Invalid CommandBlock data!"); // CraftBukkit
-                } finally {
-                    packetdataserializer.release();
+                } else {
+                    this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
                 }
-            } else {
-                this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
-            }
-        } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
-            if (this.player.activeContainer instanceof ContainerBeacon) {
-                try {
-                    packetdataserializer = packetplayincustompayload.b();
-                    int j = packetdataserializer.readInt();
-                    int k = packetdataserializer.readInt();
-                    ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
-                    Slot slot = containerbeacon.getSlot(0);
-
-                    if (slot.hasItem()) {
-                        slot.a(1);
-                        IInventory iinventory = containerbeacon.e();
-
-                        iinventory.b(1, j);
-                        iinventory.b(2, k);
-                        iinventory.update();
+            } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
+                if (this.player.activeContainer instanceof ContainerBeacon) {
+                    try {
+                        packetdataserializer = packetplayincustompayload.b();
+                        int j = packetdataserializer.readInt();
+                        int k = packetdataserializer.readInt();
+                        ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
+                        Slot slot = containerbeacon.getSlot(0);
+
+                        if (slot.hasItem()) {
+                            slot.a(1);
+                            IInventory iinventory = containerbeacon.e();
+
+                            iinventory.b(1, j);
+                            iinventory.b(2, k);
+                            iinventory.update();
+                        }
+                    } catch (Exception exception4) {
+                        PlayerConnection.c.error("Couldn\'t set beacon", exception4);
+                        this.disconnect("Invalid beacon data!"); // CraftBukkit
                     }
-                } catch (Exception exception4) {
-                    PlayerConnection.c.error("Couldn\'t set beacon", exception4);
-                    this.disconnect("Invalid beacon data!"); // CraftBukkit
                 }
-            }
-        } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
-            ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
+            } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
+                ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
 
-            if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
-                String s1 = SharedConstants.a(packetplayincustompayload.b().c(32767));
+                if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
+                    String s1 = SharedConstants.a(packetplayincustompayload.b().c(32767));
 
-                if (s1.length() <= 30) {
-                    containeranvil.a(s1);
+                    if (s1.length() <= 30) {
+                        containeranvil.a(s1);
+                    }
+                } else {
+                    containeranvil.a("");
                 }
-            } else {
-                containeranvil.a("");
             }
-        }
-        // CraftBukkit start
-        else if (packetplayincustompayload.a().equals("REGISTER")) {
-            // PandaSpigot start - Disconnect for payload errors
-            try {
-                String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                for (String channel : channels.split("\0")) {
-                    getPlayer().addChannel(channel);
+            // CraftBukkit start
+            else if (packetplayincustompayload.a().equals("REGISTER")) {
+                // PandaSpigot start - Disconnect for payload errors
+                try {
+                    String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                    for (String channel : channels.split("\0")) {
+                        getPlayer().addChannel(channel);
+                    }
+                } catch (Exception ex) {
+                    PlayerConnection.c.error("Couldn\'t register custom payload", ex);
+                    this.disconnect("Invalid payload REGISTER!");
                 }
-            } catch (Exception ex) {
-                PlayerConnection.c.error("Couldn\'t register custom payload", ex);
-                this.disconnect("Invalid payload REGISTER!");
-            }
-        } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
-            try {
-                String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                for (String channel : channels.split("\0")) {
-                    getPlayer().removeChannel(channel);
+            } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
+                try {
+                    String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                    for (String channel : channels.split("\0")) {
+                        getPlayer().removeChannel(channel);
+                    }
+                } catch (Exception ex) {
+                    PlayerConnection.c.error("Couldn\'t register custom payload", ex);
+                    this.disconnect("Invalid payload UNREGISTER!");
                 }
-            } catch (Exception ex) {
-                PlayerConnection.c.error("Couldn\'t register custom payload", ex);
-                this.disconnect("Invalid payload UNREGISTER!");
-            }
-        } else {
-            try {
-                byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
-                packetplayincustompayload.b().readBytes(data);
-                server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
-            } catch (Exception ex) {
-                PlayerConnection.c.error("Couldn\'t register custom payload", ex);
-                this.disconnect("Invalid custom payload!");
+            } else {
+                try {
+                    byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
+                    packetplayincustompayload.b().readBytes(data);
+                    server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
+                } catch (Exception ex) {
+                    PlayerConnection.c.error("Couldn\'t register custom payload", ex);
+                    this.disconnect("Invalid custom payload!");
+                }
+                // PandaSpigot end - Disconnect for payload errors
             }
-            // PandaSpigot end - Disconnect for payload errors
-        }
-        // CraftBukkit end
-        // CraftBukkit start
+            // CraftBukkit end
+            // CraftBukkit start
         } finally {
             if (packetplayincustompayload.b().refCnt() > 0) {
                 packetplayincustompayload.b().release();
